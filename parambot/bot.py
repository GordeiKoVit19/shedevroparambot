from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters
from secret import BOT_TOKEN

from sympy import sympify, simplify
import re

NUMERATOR, DENOMINATOR = 0, 1
ALLOWED_CHARS = re.compile(r'^[0-9xXa\+\-\*\(\)\sAbs]*$')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ï–ì–≠ ‚Ññ18 —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏.\n"
        "–Ø —É–º–µ—é —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏.\n"
        "–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n"
        "üìà /graph - —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "üîÑ /restart - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é /graph –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "üí° –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )


async def graph_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–∏—Ç–µ–ª—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è.\n"
        "–ü—Ä–∏–º–µ—Ä: Abs(3*x) - 2*x - 2 - a**2"
    )
    return NUMERATOR


async def graph_numerator(update, context):
    text = update.message.text.replace("|", "Abs")  # –º–æ–¥—É–ª—å –≤ Abs
    if not ALLOWED_CHARS.match(text):
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ x, a, —á–∏—Å–ª–∞, +, -, **, (), Abs.\n"
            "–ü—Ä–∏–º–µ—Ä: Abs(3*x - 3) - 2*x - 2 - a**2"
        )
        return NUMERATOR
    try:
        expr = sympify(text)
        context.user_data['numerator'] = expr
        await update.message.reply_text(
            "‚úèÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä: x**2 - Abs(2*x) - a"
        )
        return DENOMINATOR
    except:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
            "–ü—Ä–∏–º–µ—Ä: Abs(3*x - 7) - 2*x - 2 - a"
        )
        return NUMERATOR


async def graph_denominator(update, context):
    text = update.message.text.replace("|", "Abs")

    if not ALLOWED_CHARS.match(text):
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ x, a, —á–∏—Å–ª–∞, +, -, **, (), Abs.\n"
            "–ü—Ä–∏–º–µ—Ä: Abs(x**2 - 7) - 2*x - a"
        )
        return DENOMINATOR

    try:
        expr = sympify(text)
        simplified_expr = simplify(expr)
        if simplified_expr.is_Number and simplified_expr == 0:
            await update.message.reply_text(
                "‚ùå –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.\n"
                "–ü—Ä–∏–º–µ—Ä: Abs(x**2 - 2) - 2*x - a"
            )
            return DENOMINATOR

        context.user_data['denominator'] = expr
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ!\n–ß–∏—Å–ª–∏—Ç–µ–ª—å: {context.user_data['numerator']}\n"
            f"–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å: {context.user_data['denominator']}\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ a(x)."
        )
        return ConversationHandler.END
    except:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
            "–ü—Ä–∏–º–µ—Ä: Abs(x**2 - 3) - 2*x - a"
        )
        return DENOMINATOR


async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('graph', graph_start)],
        states={
            NUMERATOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, graph_numerator)],
            DENOMINATOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, graph_denominator)],
        },
        fallbacks=[CommandHandler('restart', restart)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("restart", restart))

    app.run_polling()


if __name__ == "__main__":
    main()