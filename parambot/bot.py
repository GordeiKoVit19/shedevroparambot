from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters
from secret import BOT_TOKEN
from graphing.plot import plot_graph
from sympy import sympify
import re
import time  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ time

NUMERATOR, DENOMINATOR = 0, 1
ALLOWED_CHARS = re.compile(r'^[0-9xXa\+\-\*/\(\)\s\^Abs]*$')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ï–ì–≠ ‚Ññ18 —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏.\n"
        "–Ø —É–º–µ—é —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏.\n"
        "–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞–∂–º–∏—Ç–µ /help."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n"
        "üìà /graph - —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "üîÑ /restart - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é /graph –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
    )

async def graph_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–∏—Ç–µ–ª—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è.\n"
        "–ü—Ä–∏–º–µ—Ä: Abs(3*x) - 2*x - 2 - a^2"
    )
    return NUMERATOR

async def graph_numerator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if not ALLOWED_CHARS.match(text):
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ x, a, —á–∏—Å–ª–∞, +, -, *, /, ^, (), Abs.\n"
            "–ü—Ä–∏–º–µ—Ä: Abs(3*x - 3) - 2*x - 2 - a^2"
        )
        return NUMERATOR

    try:
        expr = sympify(text, convert_xor=True)
        context.user_data['numerator'] = expr
        await update.message.reply_text(
            "‚úèÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä: x^2 - Abs(2*x) - a"
        )
        return DENOMINATOR
    except:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return NUMERATOR

async def graph_denominator(update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if not ALLOWED_CHARS.match(text):
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ x, a, —á–∏—Å–ª–∞, +, -, *, /, ^, (), Abs.\n"
            "–ü—Ä–∏–º–µ—Ä: x^2 - Abs(2*x) - a"
        )
        return DENOMINATOR

    try:
        expr = sympify(text, convert_xor=True)
        context.user_data['denominator'] = expr

        await update.message.reply_text("‚è≥ –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫...")
        time.sleep(1)

        filename = plot_graph(
            context.user_data['numerator'],
            context.user_data['denominator'],
            limit=10,
            y_limit=10
        )
        await update.message.reply_photo(photo=open(filename, 'rb'))
        return ConversationHandler.END
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", e)
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return DENOMINATOR

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('graph', graph_start)],
        states={
            NUMERATOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, graph_numerator)],
            DENOMINATOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, graph_denominator)],
        },
        fallbacks=[CommandHandler('restart', restart)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("restart", restart))

    app.run_polling()

if __name__ == "__main__":
    main()
